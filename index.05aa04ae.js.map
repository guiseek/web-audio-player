{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-c91cb1ba40a70dbb.js","node_modules/@parcel/runtime-js/lib/runtime-c7ef47d1fc00bd23.js","node_modules/@parcel/runtime-js/lib/runtime-113ee9eb02833d0c.js","src/main.ts","node_modules/@parcel/runtime-js/lib/runtime-2b78f14355bbad53.js"],"sourcesContent":["\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"l53ZJ\\\":\\\"index.05aa04ae.js\\\",\\\"c8GOh\\\":\\\"SoundHelix-Song-1.3a87d076.mp3\\\",\\\"1Axcj\\\":\\\"SoundHelix-Song-2.2c8899eb.mp3\\\",\\\"gyL46\\\":\\\"SoundHelix-Song-3.0f2a5557.mp3\\\"}\"));","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"c8GOh\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"1Axcj\")).toString();","function inicializa() {\n  const audio = new Audio();\n  const selectKeys = ['Enter', 'Space'];\n\n  let tocandoAgora = 0;\n\n  // Seleciona os elementos com querySelector\n  const form = document.querySelector('form');\n  const em = document.querySelector('em');\n  const select = document.querySelector('select');\n  const canvas = document.querySelector('canvas');\n  const playIcon = document.querySelector<SVGAElement>('#play-icon');\n  const pauseIcon = document.querySelector<SVGElement>('#pause-icon');\n\n  // Usado pra capturar botões\n  function getButton(id: string) {\n    return form?.querySelector<HTMLButtonElement>('#' + id);\n  }\n\n  // Usado pra capturar controles\n  function getInput(id: string) {\n    return form?.querySelector<HTMLInputElement>('#' + id);\n  }\n\n  // Captura botões\n  const play = getButton('play');\n  const anterior = getButton('anterior');\n  const proxima = getButton('proxima');\n\n  const tempo = getInput('tempo');\n  const volume = getInput('volume');\n\n  // Interface da música\n  interface AudioTrack {\n    artist: string;\n    title?: string;\n    album?: string;\n    year?: number;\n    url: string;\n  }\n\n  // Playlist\n  const listaDeMusicas: AudioTrack[] = [\n    { url: new URL('./assets/SoundHelix-Song-1.mp3', import.meta.url).pathname, artist: 'SoundHelix Song 1' },\n    { url: new URL('./assets/SoundHelix-Song-2.mp3', import.meta.url).pathname, artist: 'SoundHelix Song 2' },\n    { url: new URL('./assets/SoundHelix-Song-3.mp3', import.meta.url).pathname, artist: 'SoundHelix Song 3' },\n  ];\n\n  // Adiciona músicas no select\n  listaDeMusicas.forEach((musica, numero) => {\n    select.add(new Option(musica.artist, `${numero}`));\n  });\n\n  /**\n   * Daqui pra baixo tudo é baseado em eventos do DOM\n   * onplay\n   * onpause\n   *\n   * Da pra usar ainda:\n   * onended, ontimeupdate...\n   *\n   * onended: pra passar pra próxima música quando uma terminar\n   * ontimeupdate: pra atualizar o tempo tocando\n   *\n   */\n\n  // Atualiza o slider conforme o audio\n  audio.ontimeupdate = () => {\n    if (tempo) {\n      tempo.value = audio.currentTime.toString();\n\n      const s = tempo.valueAsNumber % 60 | 0;\n      const m = (tempo.valueAsNumber / 60) % 60 | 0;\n      tempo.nextElementSibling!.textContent = `${m < 10 ? '0' : ''}${m}:${\n        s < 10 ? '0' : ''\n      }${s}`;\n    }\n  };\n\n  // Ao arrastar o slider, sincroniza o audio\n  tempo.oninput = () => {\n    audio.currentTime = tempo.valueAsNumber;\n  };\n\n  // Ao arrastar o slider, altera o volume\n  volume.oninput = () => {\n    audio.volume = volume.valueAsNumber / 100;\n\n    volume.nextElementSibling!.textContent = `${volume.valueAsNumber}%`;\n  };\n\n  // Esconde o play e mostra o pause\n  audio.onplay = () => {\n    frameLooper();\n    tempo.max = `${audio.duration}`;\n\n    playIcon.style.display = 'none';\n    pauseIcon.style.display = 'block';\n    \n    em.textContent = listaDeMusicas[tocandoAgora].artist;\n  };\n\n  // Esconde o pause e mostra o play\n  audio.onpause = () => {\n    playIcon.style.display = 'block';\n    pauseIcon.style.display = 'none';\n  };\n\n  // Ao clicar no play, toca a música\n  play.onclick = () => {\n    // Se não tiver nada selecionado\n    if (!select.value) {\n      // Toca a primeira música\n      select.value = '0';      \n      listaDeMusicas[+select.value].url;\n    }\n\n    // Se não tiver nada tocando, da play\n    if (audio.paused) {\n      audio.play();\n      // Se estiver tocando, pausa\n    } else {\n      audio.pause();\n    }\n  };\n\n  // Ao clicar no anterior, toca a música anterior\n  anterior.onclick = () => {\n    // Se a música selecionada não for a primeira da lista\n    if (tocandoAgora > 0) {\n      // Toca a música anterior\n      tocandoAgora--;\n\n      // Se for a primeira da lista, toca a última\n    } else {\n      tocandoAgora = listaDeMusicas.length - 1;\n    }\n\n    select.value = `${tocandoAgora}`;\n\n    audio.src = listaDeMusicas[tocandoAgora].url;\n    audio.play();\n  };\n\n  // Ao clicar no próxima, toca a próxima música\n  proxima.onclick = () => {\n    // Se a música selecionada não for a última da lista\n    if (tocandoAgora < listaDeMusicas.length - 1) {\n      // Toca a próxima música\n      tocandoAgora++;\n\n      // Se não for a última da lista, toca a primeira\n    } else {\n      tocandoAgora = 0;\n    }\n\n    select.value = `${tocandoAgora}`;\n\n    audio.src = listaDeMusicas[tocandoAgora].url;\n    audio.play();\n  };\n\n  // Ao dar 2 cliques em uma música, toca a música\n  select.ondblclick = () => trocaMusica();\n\n  /**\n   * Verifica se a tecla pressionada faz parte da lista\n   * que definimos como teclas selecionáveis.\n   * Caso seja verdade, toca a música.\n   */\n  select.onkeydown = (event) => {\n    if (selectKeys.includes(event.code)) {\n      trocaMusica();\n    }\n  };\n\n  function trocaMusica() {\n    // O + converte str pra int\n    const numero = +select.value;\n\n    audio.src = listaDeMusicas[numero].url;\n    audio.play();\n\n    tocandoAgora = numero;\n  }\n\n  /* ================================== */\n\n  const audioCtx = new AudioContext();\n  const canvasCtx = canvas.getContext('2d');\n\n  audio.src = listaDeMusicas[0].url;\n  audio.crossOrigin = 'anonymous';\n\n  const audioSourceNode = audioCtx.createMediaElementSource(audio);\n\n  const analyserNode = audioCtx.createAnalyser();\n  const bufferLength = analyserNode.frequencyBinCount;\n  const dataArray = new Uint8Array(bufferLength);\n\n  audioSourceNode.connect(analyserNode);\n  analyserNode.connect(audioCtx.destination);\n\n  let bars: number;\n  let barX: number;\n  let barWidth: number;\n  let barHeight: number;\n\n  let render = () => {\n    canvasCtx.clearRect(0, 0, canvas.width, canvas.height);\n    canvasCtx.fillStyle = 'rgba(0, 132, 255, 0.466)';\n    bars = 280;\n    for (let i = 0; i < bars; i++) {\n      barWidth = canvas.width / bars;\n      barX = i * (barWidth + 2);\n      barHeight = -dataArray[i] / 1.6;\n      canvasCtx.fillRect(barX, canvas.height, barWidth, barHeight);\n    }\n  };\n\n  let frameLooper = () => {\n    requestAnimationFrame(frameLooper);\n    analyserNode.getByteFrequencyData(dataArray);\n    render();\n  };\n}\n\n\nlet loaded = false;\n\ndocument.onclick = () => {\n  if (!loaded) {\n    inicializa();\n  }\n  loaded = true;\n}\n","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"gyL46\")).toString();"],"names":["$ef7689007096c8a0$export$6503ec6e8aabbaf","$ef7689007096c8a0$export$f7ad0328861e2f03","$ef7689007096c8a0$var$mapping","pairs","keys","Object","i","length","id","resolved","Error","parcelRequire","register","JSON","parse","$b57b09796bbad116$exports","URL","resolve","import","meta","url","toString","$b923f3ba8c297e07$exports","$04177131cda29cd1$var$inicializa","audio","Audio","selectKeys","tocandoAgora","form","document","querySelector","em","select","canvas","playIcon","pauseIcon","getButton","getInput","play","anterior","proxima","tempo","volume","listaDeMusicas","pathname","artist","$9d78173ae5361f6a$exports","trocaMusica","numero","value","src","forEach","musica","add","Option","ontimeupdate","currentTime","s","valueAsNumber","m","nextElementSibling","textContent","oninput","onplay","frameLooper","max","duration","style","display","onpause","onclick","paused","pause","ondblclick","onkeydown","event","includes","code","audioCtx","AudioContext","canvasCtx","getContext","crossOrigin","audioSourceNode","createMediaElementSource","analyserNode","createAnalyser","bufferLength","frequencyBinCount","dataArray","Uint8Array","bars","barX","barWidth","barHeight","connect","destination","requestAnimationFrame","getByteFrequencyData","clearRect","width","height","fillStyle","fillRect","render","$04177131cda29cd1$var$loaded"],"version":3,"file":"index.05aa04ae.js.map"}