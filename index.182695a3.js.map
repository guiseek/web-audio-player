{"mappings":"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","sources":["src/utilities/query.ts","node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-c91cb1ba40a70dbb.js","src/main.ts","src/utilities/cast.ts","node_modules/@parcel/runtime-js/lib/runtime-c7ef47d1fc00bd23.js","node_modules/@parcel/runtime-js/lib/runtime-113ee9eb02833d0c.js","node_modules/@parcel/runtime-js/lib/runtime-2b78f14355bbad53.js"],"sourcesContent":["import { castArrayToObject } from './cast';\n\nexport function queryElement<\n  K extends keyof (HTMLElementTagNameMap | SVGElementTagNameMap)\n>(\n  selector: K | string,\n  parent: Document | HTMLElement | SVGElement = document\n) {\n  return parent.querySelector(selector);\n}\n\nexport function queryGroupBySelector<R extends Record<keyof R, R[keyof R]>>(\n  selectors: Record<keyof R, string>\n) {\n  const keySelectorMap = Object.entries(selectors);\n\n  const mapFn = ([key, selector]) => ({ [key]: queryElement(selector) });\n\n  return castArrayToObject(keySelectorMap.map(mapFn)) as R;\n}\n","\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"l53ZJ\\\":\\\"index.182695a3.js\\\",\\\"c8GOh\\\":\\\"SoundHelix-Song-1.3a87d076.mp3\\\",\\\"1Axcj\\\":\\\"SoundHelix-Song-2.2c8899eb.mp3\\\",\\\"gyL46\\\":\\\"SoundHelix-Song-3.0f2a5557.mp3\\\"}\"));","import { queryGroupBySelector } from './utilities/query';\nimport { PlayerElements } from './types/elements';\n\nconst elCtrl = queryGroupBySelector<PlayerElements>({\n  em: 'em',\n  form: 'form',\n  play: '#play',\n  prev: '#prev',\n  next: '#next',\n  time: '#time',\n  color: '#color',\n  canvas: 'canvas',\n  select: 'select',\n  volume: '#volume',\n  playIcon: '#play svg > use',\n});\n\nfunction inicializa() {\n  const audio = new Audio();\n  const selectKeys = ['Enter', 'Space'];\n\n  let tocandoAgora = 0;\n\n  let barsColor = '#0084ff';\n\n  // Interface da música\n  interface AudioTrack {\n    artist: string;\n    title?: string;\n    album?: string;\n    year?: number;\n    url: string;\n  }\n\n  // Playlist\n  const listaDeMusicas: AudioTrack[] = [\n    {\n      url: new URL('./assets/SoundHelix-Song-1.mp3', import.meta.url).pathname,\n      artist: 'SoundHelix Song 1',\n    },\n    {\n      url: new URL('./assets/SoundHelix-Song-2.mp3', import.meta.url).pathname,\n      artist: 'SoundHelix Song 2',\n    },\n    {\n      url: new URL('./assets/SoundHelix-Song-3.mp3', import.meta.url).pathname,\n      artist: 'SoundHelix Song 3',\n    },\n  ];\n\n  // Adiciona músicas no select\n  listaDeMusicas.forEach((musica, numero) => {\n    elCtrl.select.add(new Option(musica.artist, `${numero}`));\n  });\n\n  // Atualiza o slider conforme o audio\n  audio.ontimeupdate = () => {\n    if (elCtrl.time) {\n      elCtrl.time.value = audio.currentTime.toString();\n\n      const s = elCtrl.time.valueAsNumber % 60 | 0;\n      const m = (elCtrl.time.valueAsNumber / 60) % 60 | 0;\n      elCtrl.time.nextElementSibling!.textContent = `${\n        m < 10 ? '0' : ''\n      }${m}:${s < 10 ? '0' : ''}${s}`;\n    }\n  };\n\n  elCtrl.color.value = barsColor;\n\n  elCtrl.color.oninput = () => {\n    barsColor = elCtrl.color.value;\n    document.documentElement.style.setProperty('--color-primary', barsColor);\n  };\n\n  audio.onloadedmetadata = () => {\n    elCtrl.time.max = `${audio.duration}`;\n  };\n\n  // Ao arrastar o slider, sincroniza o audio\n  elCtrl.time.oninput = () => {\n    audio.currentTime = elCtrl.time.valueAsNumber;\n  };\n\n  // Ao arrastar o slider, altera o volume\n  elCtrl.volume.oninput = () => {\n    audio.volume = elCtrl.volume.valueAsNumber / 100;\n\n    elCtrl.volume.nextElementSibling!.textContent = `${elCtrl.volume.valueAsNumber}%`;\n  };\n\n  // const playIcon = elCtrl.play.querySelector<SVGUseElement>('svg > use');\n\n  // Esconde o play e mostra o pause\n  audio.onplay = () => {\n    frameLooper();\n\n    elCtrl.playIcon.href.baseVal = '#pause-symbol';\n\n    elCtrl.em.textContent = listaDeMusicas[tocandoAgora].artist;\n  };\n\n  // Esconde o pause e mostra o play\n  audio.onpause = () => {\n    elCtrl.playIcon.href.baseVal = '#play-symbol';\n  };\n\n  // Ao clicar no play, toca a música\n  elCtrl.play.onclick = () => {\n    // Se não tiver nada selecionado\n    if (!elCtrl.select.value) {\n      // Toca a primeira música\n      elCtrl.select.value = '0';\n      listaDeMusicas[+elCtrl.select.value].url;\n    }\n\n    // Se não tiver nada tocando, da play\n    if (audio.paused) {\n      audio.play();\n      // Se estiver tocando, pausa\n    } else {\n      audio.pause();\n    }\n  };\n\n  // Ao clicar no anterior, toca a música anterior\n  elCtrl.prev.onclick = () => {\n    // Se a música selecionada não for a primeira da lista\n    if (tocandoAgora > 0) {\n      // Toca a música anterior\n      tocandoAgora--;\n\n      // Se for a primeira da lista, toca a última\n    } else {\n      tocandoAgora = listaDeMusicas.length - 1;\n    }\n\n    elCtrl.select.value = `${tocandoAgora}`;\n\n    audio.src = listaDeMusicas[tocandoAgora].url;\n    audio.play();\n  };\n\n  // Ao clicar no próxima, toca a próxima música\n  elCtrl.next.onclick = () => {\n    // Se a música selecionada não for a última da lista\n    if (tocandoAgora < listaDeMusicas.length - 1) {\n      // Toca a próxima música\n      tocandoAgora++;\n\n      // Se não for a última da lista, toca a primeira\n    } else {\n      tocandoAgora = 0;\n    }\n\n    elCtrl.select.value = `${tocandoAgora}`;\n\n    audio.src = listaDeMusicas[tocandoAgora].url;\n    audio.play();\n  };\n\n  // Ao dar 2 cliques em uma música, toca a música\n  elCtrl.select.ondblclick = () => trocaMusica();\n\n  /**\n   * Verifica se a tecla pressionada faz parte da lista\n   * que definimos como teclas selecionáveis.\n   * Caso seja verdade, toca a música.\n   */\n  elCtrl.select.onkeydown = (event) => {\n    if (selectKeys.includes(event.code)) {\n      trocaMusica();\n    }\n  };\n\n  function trocaMusica() {\n    // O + converte str pra int\n    const numero = +elCtrl.select.value;\n\n    audio.src = listaDeMusicas[numero].url;\n    audio.play();\n\n    tocandoAgora = numero;\n  }\n\n  /* ================================== */\n\n  const audioCtx = new AudioContext();\n  const canvasCtx = elCtrl.canvas.getContext('2d');\n\n  audio.src = listaDeMusicas[0].url;\n  audio.crossOrigin = 'anonymous';\n\n  const audioSourceNode = audioCtx.createMediaElementSource(audio);\n\n  const analyserNode = audioCtx.createAnalyser();\n  const bufferLength = analyserNode.frequencyBinCount;\n  const dataArray = new Uint8Array(bufferLength);\n\n  audioSourceNode.connect(analyserNode);\n  analyserNode.connect(audioCtx.destination);\n\n  let bars: number;\n  let barX: number;\n  let barWidth: number;\n  let barHeight: number;\n\n  let render = () => {\n    elCtrl.canvas.width = innerWidth - 40;\n\n    if (canvasCtx) {\n      canvasCtx.clearRect(0, 0, elCtrl.canvas.width, elCtrl.canvas.height);\n      canvasCtx.fillStyle = barsColor;\n\n      bars = elCtrl.canvas.width;\n\n      for (let i = 0; i < bars; i++) {\n        barWidth = elCtrl.canvas.width / bars;\n        barX = i * (barWidth + 2);\n        barHeight = -dataArray[i] / 1.6;\n        canvasCtx.fillRect(barX, elCtrl.canvas.height, barWidth, barHeight);\n      }\n    }\n  };\n\n  let frameLooper = () => {\n    requestAnimationFrame(frameLooper);\n    analyserNode.getByteFrequencyData(dataArray);\n    render();\n  };\n}\n\nlet loaded = false;\n\ndocument.onclick = () => {\n  if (!loaded) {\n    inicializa();\n  }\n  loaded = true;\n};\n","export function castArrayToObject<T>(array: T[]) {\n  return array.reduce((acc, curr) => ({ ...acc, ...curr }), {});\n}\n","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"c8GOh\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"1Axcj\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"gyL46\")).toString();"],"names":["$b14f56d83984b735$export$b13c486faa984ec0","selector","parent","document","querySelector","$ef7689007096c8a0$export$6503ec6e8aabbaf","$ef7689007096c8a0$export$f7ad0328861e2f03","$ef7689007096c8a0$var$mapping","pairs","keys","Object","i","length","id","resolved","Error","parcelRequire","register","JSON","parse","$04177131cda29cd1$var$elCtrl","selectors","em","form","play","prev","next","time","color","canvas","select","volume","playIcon","entries","map","key","reduce","acc","curr","$b57b09796bbad116$exports","URL","resolve","import","meta","url","toString","$b923f3ba8c297e07$exports","$04177131cda29cd1$var$inicializa","audio","Audio","selectKeys","tocandoAgora","barsColor","listaDeMusicas","pathname","artist","$9d78173ae5361f6a$exports","trocaMusica","numero","value","src","forEach","musica","add","Option","ontimeupdate","currentTime","s","valueAsNumber","m","nextElementSibling","textContent","oninput","documentElement","style","setProperty","onloadedmetadata","max","duration","onplay","frameLooper","href","baseVal","onpause","onclick","paused","pause","ondblclick","onkeydown","event","includes","code","audioCtx","AudioContext","canvasCtx","getContext","crossOrigin","audioSourceNode","createMediaElementSource","analyserNode","createAnalyser","bufferLength","frequencyBinCount","dataArray","Uint8Array","bars","barX","barWidth","barHeight","connect","destination","requestAnimationFrame","getByteFrequencyData","width","innerWidth","clearRect","height","fillStyle","fillRect","render","$04177131cda29cd1$var$loaded"],"version":3,"file":"index.182695a3.js.map"}